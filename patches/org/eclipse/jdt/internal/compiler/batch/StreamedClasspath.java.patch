--- /dev/null
+++ b/org/eclipse/jdt/internal/compiler/batch/StreamedClasspath.java
@@ -0,0 +1,281 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2018 IBM Corporation and others.
+ *
+ * This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License 2.0
+ * which accompanies this distribution, and is available at
+ * https://www.eclipse.org/legal/epl-2.0/
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     Stephan Herrmann - Contribution for
+ *								Bug 440477 - [null] Infrastructure for feeding external annotations into compilation
+ *								Bug 440687 - [compiler][batch][null] improve command line option for external annotations
+ *******************************************************************************/
+package org.eclipse.jdt.internal.compiler.batch;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath;
+import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
+import org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;
+import org.eclipse.jdt.internal.compiler.classfmt.ExternalAnnotationDecorator;
+import org.eclipse.jdt.internal.compiler.classfmt.ExternalAnnotationProvider;
+import org.eclipse.jdt.internal.compiler.env.AccessRuleSet;
+import org.eclipse.jdt.internal.compiler.env.IModule;
+import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
+import org.eclipse.jdt.internal.compiler.env.IBinaryType;
+import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
+import org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.ExternalAnnotationStatus;
+import org.eclipse.jdt.internal.compiler.util.ManifestAnalyzer;
+import org.eclipse.jdt.internal.compiler.util.SuffixConstants;
+import org.eclipse.jdt.internal.compiler.util.Util;
+import org.cadixdev.mercury.util.ClasspathSectionProblemReporterTree;
+
+@SuppressWarnings({"rawtypes", "unchecked"})
+public class StreamedClasspath extends ClasspathLocation {
+	final Map<String, NameEnvironmentAnswer> classpath = new HashMap<>();
+
+	protected Set<String> packageCache;
+
+	public StreamedClasspath(AccessRuleSet accessRuleSet, String destinationPath) {
+		super(accessRuleSet, destinationPath);
+	}
+
+	@Override
+	public List<Classpath> fetchLinkedJars(FileSystem.ClasspathSectionProblemReporter problemReporter) {
+		return null;
+	}
+
+	/**
+	 * If the class is the multirelease version of the given class file name, it will override any future/previous class entries under that name
+	 */
+	public void addClass(String classFileName, byte[] data, String majorReleaseVersion) {
+		String src = "META-INF/versions/" + majorReleaseVersion + "/";
+		int index = classFileName.indexOf(src);
+		if(index != -1) {
+			int start = index + src.length();
+			this.classpath.put(classFileName.substring(start), this.getAnswer(data, classFileName));
+		} else {
+			this.addClass(classFileName, data);
+		}
+	}
+
+	public void addClass(String classFileName, byte[] data) {
+		this.classpath.computeIfAbsent(classFileName, qualifiedBinaryFileName -> getAnswer(data, qualifiedBinaryFileName));
+	}
+
+	public void setClass(String classFileName, byte[] data) {
+		this.classpath.put(classFileName, this.getAnswer(data, classFileName));
+	}
+
+	private NameEnvironmentAnswer getAnswer(byte[] data, String qualifiedBinaryFileName) {
+		try {
+			ClassFileReader reader = ClassFileReader.read(data, qualifiedBinaryFileName, false);
+			char[] modName = this.module == null ? null : this.module.name();
+			if (reader.moduleName == null)
+				reader.moduleName = modName;
+			else
+				modName = reader.moduleName;
+			return new NameEnvironmentAnswer(reader, fetchAccessRestriction(qualifiedBinaryFileName), modName);
+		} catch (ClassFormatException e) {
+			// treat as if class file is missing
+		}
+		return null;
+	}
+
+	@Override
+	public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String moduleName, String qualifiedBinaryFileName) {
+		return findClass(typeName, qualifiedPackageName, moduleName, qualifiedBinaryFileName, false);
+	}
+	@Override
+	public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String moduleName, String qualifiedBinaryFileName, boolean asBinaryOnly) {
+		if (!isPackage(qualifiedPackageName, moduleName))
+			return null; // most common case
+		return this.classpath.get(qualifiedBinaryFileName);
+	}
+
+	@Override
+	public boolean hasAnnotationFileFor(String qualifiedTypeName) {
+		return false; // TODO: add annotation file support, unessesary for remapping though
+	}
+
+	@Override
+	public char[][][] findTypeNames(final String qualifiedPackageName, String moduleName) {
+		if (!isPackage(qualifiedPackageName, moduleName))
+			return null; // most common case
+		final char[] packageArray = qualifiedPackageName.toCharArray();
+		final ArrayList answers = new ArrayList();
+
+		nextEntry:
+		for (String fileName : this.classpath.keySet()) {
+			// add the package name & all of its parent packages
+			int last = fileName.lastIndexOf('/');
+			if (last > 0) {
+				// extract the package name
+				String packageName = fileName.substring(0, last);
+				if (!qualifiedPackageName.equals(packageName))
+					continue nextEntry;
+				int indexOfDot = fileName.lastIndexOf('.');
+				if (indexOfDot != -1) {
+					String typeName = fileName.substring(last + 1, indexOfDot);
+					answers.add(
+							CharOperation.arrayConcat(
+									CharOperation.splitOn('/', packageArray),
+									typeName.toCharArray()));
+				}
+			}
+		}
+		int size = answers.size();
+		if (size != 0) {
+			char[][][] result = new char[size][][];
+			answers.toArray(result);
+			return result;
+		}
+		return null;
+	}
+
+	@Override
+	public void initialize() throws IOException {
+	}
+
+	void acceptModule(ClassFileReader reader) {
+		if (reader != null) {
+			acceptModule(reader.getModuleDeclaration());
+		}
+	}
+	void acceptModule(byte[] content) {
+		if (content == null)
+			return;
+		ClassFileReader reader = null;
+		try {
+			reader = new ClassFileReader(content, IModule.MODULE_INFO_CLASS.toCharArray());
+		} catch (ClassFormatException e) {
+			e.printStackTrace();
+		}
+		if (reader != null && reader.getModuleDeclaration() != null) {
+			acceptModule(reader);
+		}
+	}
+	protected void addToPackageCache(String fileName, boolean endsWithSep) {
+		int last = endsWithSep ? fileName.length() : fileName.lastIndexOf('/');
+		while (last > 0) {
+			// extract the package name
+			String packageName = fileName.substring(0, last);
+			if (this.packageCache.contains(packageName))
+				return;
+			this.packageCache.add(packageName);
+			last = packageName.lastIndexOf('/');
+		}
+	}
+	@Override
+	public synchronized char[][] getModulesDeclaringPackage(String qualifiedPackageName, String moduleName) {
+		if (this.packageCache != null)
+			return singletonModuleNameIf(this.packageCache.contains(qualifiedPackageName));
+
+		this.packageCache = new HashSet<>(41);
+		this.packageCache.add(Util.EMPTY_STRING);
+
+		for (String fileName : this.classpath.keySet()) {
+			addToPackageCache(fileName, false);
+		}
+		return singletonModuleNameIf(this.packageCache.contains(qualifiedPackageName));
+	}
+
+	@Override
+	public boolean hasCompilationUnit(String qualifiedPackageName, String moduleName) {
+		qualifiedPackageName += '/';
+		for (String fileName : this.classpath.keySet()) {
+			if (fileName.startsWith(qualifiedPackageName) && fileName.length() > qualifiedPackageName.length()) {
+				String tail = fileName.substring(qualifiedPackageName.length());
+				if (tail.indexOf('/') != -1)
+					continue;
+				if (tail.toLowerCase().endsWith(SUFFIX_STRING_class))
+					return true;
+			}
+		}
+		return false;
+	}
+
+	@Override
+	public char[][] listPackages() {
+		Set<String> packageNames = new HashSet<>();
+		for (String fileName : this.classpath.keySet()) {
+			int lastSlash = fileName.lastIndexOf('/');
+			if (lastSlash != -1 && fileName.toLowerCase().endsWith(SUFFIX_STRING_class))
+				packageNames.add(fileName.substring(0, lastSlash).replace('/', '.'));
+		}
+		return packageNames.stream().map(String::toCharArray).toArray(char[][]::new);
+	}
+
+	@Override
+	public void reset() {
+		super.reset();
+		this.packageCache = null;
+		this.classpath.clear();
+	}
+
+	@Override
+	public String toString() {
+		return "Streaming classpath"; //$NON-NLS-1$
+	}
+	@Override
+	public char[] normalizedPath() {
+		if (this.normalizedPath == null) {
+			String path2 = this.getPath();
+			char[] rawName = path2.toCharArray();
+			if (File.separatorChar == '\\') {
+				CharOperation.replace(rawName, '\\', '/');
+			}
+			this.normalizedPath = CharOperation.subarray(rawName, 0, CharOperation.lastIndexOf('.', rawName));
+		}
+		return this.normalizedPath;
+	}
+
+	@Override
+	public String getPath() {
+		return this.toString();
+	}
+	@Override
+	public int getMode() {
+		return BINARY;
+	}
+
+	@Override
+	public IModule getModule() {
+		return this.module;
+	}
+
+	@Override
+	public boolean equals(Object o) {
+		if(this == o) {
+			return true;
+		}
+		if(!(o instanceof StreamedClasspath)) {
+			return false;
+		}
+		if(!super.equals(o)) {
+			return false;
+		}
+
+		StreamedClasspath classpath1 = (StreamedClasspath) o;
+
+		return this.classpath.equals(classpath1.classpath) && Objects.equals(this.packageCache, classpath1.packageCache);
+	}
+}
